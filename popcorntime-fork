{
  "name": "Popcorn-Time-bait",
  "homepage": "http://popcorn-time.tv/bait",
  "bugs": "https://github.com/popcorn-org/popcorn-app/issues",
  "repository": {
    "type": "git",
    "url": "https://github.com/popcorn-org/popcorn-app.git"
  },
  "license": "GPL-3.0",
  "main": "app://host/index.html",
  "version": "0.2.8",
  "window": {
    "title": "Popcorn Time",
    "icon": "images/icon.png",
    "toolbar": false,
    "frame": false,
    "width": 962,
    "height": 600,
    "min_width": 962,
    "min_height": 600,
    "resizable": true
  },
  "dependencies": {
    "node-uuid": "1.4.1",
    "adm-zip": "0.4.4",
    "jschardet": "1.1.0",
    "iconv-lite": "0.2.11",
    "i18n": "0.4.1",
    "xmlrpc": "1.2.0",
    "request": "2.34.0",
    "peerflix": "0.1.6",
    "cheerio": "0.13.1",
    "express": "3.4.8",
    "socket.io": "0.9.16",
    "URIjs": "1.12.1",
    "async": "0.2.x",
    "underscore": "1.6.x",
    "q": "2.0.x",
    "rimraf": "^2.2.6"
  },
  "devDependencies": {
    "grunt": "0.4.4",
    "grunt-contrib-copy": "0.5.0",
    "grunt-contrib-compass": "0.7.2",
    "grunt-node-webkit-builder": "0.1.x",
    "load-grunt-tasks": "0.4.0"
  }
}

module.exports = function(grunt) {
  "use strict ";

  var buildPlatforms = parseBuildPlatforms(grunt.option('platforms'));

  require('load-grunt-tasks')(grunt);

  grunt.registerTask('default', [
    'compass'
  ]);

  grunt.registerTask('css', [
    'compass'
  ]);

  grunt.registerTask('nodewkbuild', [
    'nodewebkit:build',
    'copy:ffmpeg'
  ]);

  grunt.registerTask('build', [
    'default',
    'nodewebkit:build',
    'copy:ffmpeg'
  ]);
  
  grunt.registerTask('dist', [
    'default',
    'nodewebkit:dist',
    'copy:ffmpeg',
    'copy:package'
  ]);

  grunt.initConfig({
    compass: {
      dist: {
        options: {
          cssDir: 'css'
        },
        files: {
          'css/app.css': 'sass/app.scss'
        }
      }
    },

    nodewebkit: {
      build: {
        options: {
          version: '0.9.2',
          build_dir: './build', // bait
          mac_icns: './images/popcorntime.icns', // bait
          mac: buildPlatforms.mac,
          win: buildPlatforms.win,
          linux32: buildPlatforms.linux32,
          linux64: buildPlatforms.linux64
        },
        src: ['./css/**', './fonts/**', './images/**', './js/**', './language/**', './node_modules/**', '!./node_modules/grunt*/**', './rc/**', './Config.rb', './index.html', './package.json', './README.md' ] // Your node-webkit app './**/*'
      },
      dist: {
        options: {
          version: '0.9.2',
          build_dir: './build', // bait
          embed_nw: false, // bait
          keep_nw: true,
          mac_icns: './images/popcorntime.icns', // Path to the Mac icon file
          mac: buildPlatforms.mac,
          win: buildPlatforms.win,
          linux32: buildPlatforms.linux32,
          linux64: buildPlatforms.linux64
        },
        src: ['./css/**', './fonts/**', './images/**', './js/**', './language/**', './node_modules/**', '!./node_modules/grunt*/**', './rc/**', './Config.rb', './index.html', './package.json', './README.md' ] // Your node-webkit app './**/*'
      }
    },

    copy: {
      ffmpeg: {
        files: [
          {
            src: 'libraries/win/ffmpegsumo.dll',
            dest: 'build/releases/Popcorn-Time/win/Popcorn-Time/ffmpegsumo.dll',
            flatten: true
          },
          {
            src: 'libraries/win/ffmpegsumo.dll',
            dest: 'build/cache/win/<%= nodewebkit.build.options.version %>/ffmpegsumo.dll',
            flatten: true
          },
          {
            src: 'libraries/mac/ffmpegsumo.so',
            dest: 'build/releases/Popcorn-Time/mac/Popcorn-Time.app/Contents/Frameworks/node-webkit Framework.framework/Libraries/ffmpegsumo.so',
            flatten: true
          },
          {
            src: 'libraries/mac/ffmpegsumo.so',
            dest: 'build/cache/mac/<%= nodewebkit.build.options.version %>/node-webkit.app/Contents/Frameworks/node-webkit Framework.framework/Libraries/ffmpegsumo.so',
            flatten: true
          },
          {
            src: 'libraries/linux64/libffmpegsumo.so',
            dest: 'build/releases/Popcorn-Time/linux64/Popcorn-Time/libffmpegsumo.so',
            flatten: true
          },
          {
            src: 'libraries/linux64/libffmpegsumo.so',
            dest: 'build/cache/linux64/<%= nodewebkit.build.options.version %>/libffmpegsumo.so',
            flatten: true
          },
          {
            src: 'libraries/linux32/libffmpegsumo.so',
            dest: 'build/releases/Popcorn-Time/linux32/Popcorn-Time/libffmpegsumo.so',
            flatten: true
          },
          {
            src: 'libraries/linux32/libffmpegsumo.so',
            dest: 'build/cache/linux32/<%= nodewebkit.build.options.version %>/libffmpegsumo.so',
            flatten: true
          }
        ]
      },
      package: {
        files: [
          {
            src: 'build/releases/Popcorn-Time/Popcorn-Time.nw',
            dest: 'build/releases/Popcorn-Time/linux32/Popcorn-Time/package.nw',
            flatten: true
          },
          {
            src: 'build/releases/Popcorn-Time/Popcorn-Time.nw',
            dest: 'build/releases/Popcorn-Time/linux64/Popcorn-Time/package.nw',
            flatten: true
          }
        ]
      }
    }
  });
};

var parseBuildPlatforms = function(argumentPlatform) {
  // this will make it build no platform when the platform option is specified
  // without a value which makes argumentPlatform into a boolean
  var inputPlatforms = argumentPlatform || process.platform + ";" + process.arch;

  // Do some scrubbing to make it easier to match in the regexes bellow
  inputPlatforms = inputPlatforms.replace("darwin", "mac");
  inputPlatforms = inputPlatforms.replace(/;ia|;x|;arm/, "");

  var buildAll = /^all$/.test(inputPlatforms);

  var buildPlatforms = {
    mac: /mac/.test(inputPlatforms) || buildAll,
    win: /win/.test(inputPlatforms) || buildAll,
    linux32: /linux32/.test(inputPlatforms) || buildAll,
    linux64: /linux64/.test(inputPlatforms) || buildAll
  };

  return buildPlatforms;
}
